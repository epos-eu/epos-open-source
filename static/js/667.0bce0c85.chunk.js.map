{"version":3,"file":"static/js/667.0bce0c85.chunk.js","mappings":"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","sources":["../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js","components/ContactForm/styles.ts","components/Block/styles.ts","components/Block/index.tsx","common/utils/validationRules.ts","components/ContactForm/index.tsx","common/utils/useForm.tsx"],"sourcesContent":["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n  height: auto; /* Adjusts height based on content */\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n      @media (min-width: 2440px) {\r\n    \r\n  padding: 5rem 0;\r\n   height: auto; /* Adjusts height based on content */\r\n\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n  border: 0.1px solid black;\r\n  padding: 30px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n      @media (min-width: 2440px) {\r\n    max-width: 700px;\r\n    height: 500px;\r\n    margin-right:110px;\r\n}\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  font-size:16px;\r\n  font-weight:bold;\r\n  margin-top : 10px;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: center;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n\r\nexport const FormInput = styled(\"input\")`\r\nborder: 0.1px solid black;\r\nborder-radius: 10px;\r\nmargin-top: 10px;\r\nmargin-bottom: 10px;\r\n`;\r\n\r\nexport const SubmitInput = styled(\"input\")`\r\nborder: 0.1px solid black;\r\nmargin-top: 20px;\r\ncursor: pointer;\r\nborder-radius: 30px;\r\n &:hover{\r\n    color: white;\r\n    text-underline-position: under;\r\n    background:   #457945;\r\n}\r\n\r\n`;\r\n\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n font-family: \"OpenSans\", sans-serif;\r\n  color: black;\r\n  font-size:20px;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n\r\nexport const Title = styled(\"h1\")`\r\nmargin: 1.5rem 0 2rem 0;\r\nfont-size:32px;\r\nfont-family: \"Lato\", \"OpenSans\", sans-serif;\r\ncolor: black;\r\n&:hover, &:focus {\r\n  color:  #152c15 ;\r\n}\r\n`","import { Container, TextWrapper, Content , Title } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n}\r\n\r\nconst Block = ({ title, content}: Props) => {\r\n  return (\r\n    <Container>\r\n      <Title>Contact Us</Title>\r\n      <TextWrapper>\r\n        <Content>\r\n        Have questions, feedback, or suggestions? We're here to help!\r\n        Reach out to the team behind EPOS open-source project!\r\n        </Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Block;\r\n","const validate = (values: { [key: string]: string }) => {\r\n  const errors: { [key: string]: string } = {};\r\n\r\n  if (!values.user_name) {\r\n    errors.user_name = \"Name is required\";\r\n  }\r\n\r\n  if (!values.user_email) {\r\n    errors.user_email = \"Email is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.user_email)) {\r\n    errors.user_email = \"Email is invalid\";\r\n  }\r\n\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n\r\n  return errors;\r\n};\r\nexport default validate ","import React, { useRef , useState } from \"react\";\r\nimport emailjs from \"@emailjs/browser\";\r\nimport { Row, Col } from \"antd\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport { FormGroup  , ContactContainer , SubmitInput , FormInput , Label} from './styles'; \r\nimport Block from \"../Block\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport Popup from \"../../common/pop-up\";\r\n\r\nexport interface ContactProps {\r\n  title: string;\r\n  content: string;\r\n  id: string;\r\n}\r\n\r\nconst Contact:React.FC<ContactProps> = () => {\r\n  const form = useRef<HTMLFormElement>(null);\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n  const [popupVisible, setPopupVisible] = useState(false);\r\n\r\n  const sendEmail = async () => {\r\n    if (form.current) {\r\n      try {\r\n        await emailjs.sendForm(\r\n          \"service_rooidig\",\r\n          \"template_h9q5ysi\",\r\n          form.current,{\r\n            publicKey: '2SdTrWiRdpJxdw5uT',\r\n          });\r\n        console.log(\"SUCCESS!\");\r\n        // Reset form and state after successful submission\r\n        form.current.reset();\r\n        setPopupVisible(true); // Show the popup\r\n      } catch (error: any) {\r\n        console.error(\"FAILED...\", error.text);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    handleSubmit(e, sendEmail);\r\n  };\r\n\r\n  return (\r\n    <ContactContainer>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n      <Col lg={12} md={11} sm={24} xs={24}>\r\n      <Slide direction=\"left\" triggerOnce>\r\n      <Block title=\"\" content=\"\" />\r\n          </Slide>\r\n        </Col>\r\n    <FormGroup ref={form} onSubmit={onSubmit}>\r\n      <div>\r\n        <Label>Name</Label>\r\n        <FormInput\r\n          type=\"text\"\r\n          name=\"user_name\"\r\n          value={values.user_name || \"\"}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.user_name && <span>{errors.user_name}</span>}\r\n      </div>\r\n      <div>\r\n        <Label>Email</Label>\r\n        <FormInput\r\n          type=\"email\"\r\n          name=\"user_email\"\r\n          value={values.user_email || \"\"}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.user_email && <span>{errors.user_email}</span>}\r\n      </div>\r\n      <div>\r\n        <Label>Message</Label>\r\n        <Col span={24}>\r\n        <textarea\r\n          name=\"message\"\r\n          value={values.message || \"\"}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.message && <span>{errors.message}</span>}\r\n        </Col>\r\n      </div>\r\n      <div>\r\n        <SubmitInput type=\"submit\" value=\"Submit\" />\r\n      </div>\r\n    </FormGroup>\r\n    </Row>\r\n    <Popup trigger={popupVisible} setTrigger={setPopupVisible}>\r\n        <h3>Thank you!</h3>\r\n        <p>Your message has been sent successfully.</p>\r\n      </Popup>\r\n    </ContactContainer>\r\n  );\r\n};\r\nexport default Contact;\r\n","import React from \"react\";\r\n\r\n\r\nexport const useForm = (validate: (values: { [key: string]: string }) => { [key: string]: string }) => {\r\n  const [formState, setFormState] = React.useState({\r\n    values: {} as { [key: string]: string },\r\n    errors: {} as { [key: string]: string },\r\n  });\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: { ...prevState.values, [name]: value },\r\n      errors: { ...prevState.errors, [name]: \"\" }, // Reset the error for the field\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>, callback: () => Promise<void>) => {\r\n    e.preventDefault();\r\n    const errors = validate(formState.values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n    if (Object.keys(errors).length === 0) {\r\n     await callback();\r\n      setFormState({\r\n        values: {}, // Reset values to initial state\r\n        errors: {}, // Clear errors\r\n      });\r\n    }\r\n  };\r\n\r\n  return {\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n    handleChange,\r\n    handleSubmit,\r\n  };\r\n};\r\n\r\n"],"names":["EmailJSResponseStatus","constructor","_status","arguments","length","undefined","_text","this","status","text","store","origin","blockHeadless","storageProvider","createWebStorage","localStorage","get","key","Promise","resolve","getItem","set","value","setItem","remove","removeItem","buildOptions","options","publicKey","toString","sendPost","async","url","data","headers","response","fetch","method","body","message","responseStatus","ok","validateParams","serviceID","templateID","isHeadless","navigator","webdriver","languages","headlessError","isBlockedValueInParams","params","list","watchVariable","isBlockListDisabled","validateBlockListParams","Array","isArray","name","FormData","getValue","includes","blockedEmailError","isLimitRateHit","defaultID","storage","throttle","validateLimitRateParams","id","leftTime","lastTime","Number","Date","now","getLeftTime","limitRateError","form","opts","blockList","limitRate","reject","currentForm","document","querySelector","findHTMLForm","nodeName","validateForm","formData","location","pathname","append","ContactContainer","styled","FormGroup","Label","FormInput","SubmitInput","Content","Container","TextWrapper","Title","_ref","title","content","_jsxs","children","_jsx","values","errors","user_name","user_email","test","Contact","useRef","handleChange","handleSubmit","validate","formState","setFormState","React","e","target","prevState","callback","preventDefault","Object","keys","useForm","popupVisible","setPopupVisible","useState","sendEmail","current","emailjs","console","log","reset","error","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","ref","onSubmit","type","onChange","span","Popup","trigger","setTrigger"],"sourceRoot":""}