{"version":3,"file":"static/js/441.e83f27c4.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/Button/index.tsx","components/ContentBlock/styles.ts","components/ContentBlock/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled(\"button\")<{ color?: string }>`\r\n  background: white;\r\n  color: black;\r\n  font-size: 1rem;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  border: 2px solid black;\r\n  border-radius: 50px;  /* Fully rounded border */\r\n  padding: 13px 0;\r\n  cursor: pointer;\r\n  margin-top: 0.625rem;\r\n  max-width: 290px;\r\n  transition: all 0.3s ease-in-out;\r\n  box-shadow: 0 16px 30px rgba(23, 31, 114, 0.2);\r\n  font-family: \"Lato\", \"OpenSans\", sans-serif;\r\n\r\n  &:hover,\r\n  &:active,\r\n  &:focus {\r\n    color: white;\r\n    border: 1px solid  #152c15 ;\r\n    background-color:  #152c15 ;\r\n  }\r\n`;\r\n\r\n","import { StyledButton } from \"./styles\";\r\nimport { ButtonProps } from \"../types\";\r\n\r\nexport const Button = ({ color, children, onClick }: ButtonProps) => (\r\n  <StyledButton color={color} onClick={onClick}>\r\n    {children}\r\n  </StyledButton>\r\n);\r\n","import { Row } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ContentSection = styled(\"section\")`\r\n  position: relative;\r\n  padding: 2rem 0 1rem;\r\n  color:  #152c15  ;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 4rem 0 4rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin: 1.5rem 0 2rem 0;\r\n font-family: \"OpenSans\", sans-serif;\r\n  color: black;\r\n  font-size:16px;\r\n`;\r\n\r\nexport const Title = styled(\"h1\")`\r\n  margin: 1.5rem 0 2rem 0;\r\n  font-size:32px;\r\n  font-family: \"Lato\", \"OpenSans\", sans-serif;\r\n  color: black;\r\n  &:hover, &:focus {\r\n    color:  #152c15 ;\r\n  }\r\n`;\r\n\r\n\r\nexport const StyledRow = styled(Row)`\r\n  flex-direction: ${({ direction }: { direction: string }) =>\r\n    direction === \"left\" ? \"row\" : \"row-reverse\"};\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 540px;\r\n  color:  #152c15  ;\r\n\r\n  @media only screen and (max-width: 575px) {\r\n    padding-top: 4rem;\r\n  }\r\n`;\r\n\r\nexport const ServiceWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n  \r\n`;\r\n\r\nexport const MinTitle = styled(\"h6\")`\r\n  font-size: 15px;\r\n  line-height: 1rem;\r\n  padding: 0.5rem 0;\r\n  text-transform: uppercase;\r\n  color: red;\r\n  font-family: \"Motiva Sans Light\", sans-serif;\r\n`;\r\n\r\nexport const MinPara = styled(\"p\")`\r\n  font-size: 13px;\r\n  color:  #152c15 ;\r\n`;\r\n\r\nexport const ButtonWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n\r\n  @media screen and (min-width: 1024px) {\r\n    max-width: 80%;\r\n  }\r\n\r\n  button:last-child {\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport {\r\n  ContentSection,\r\n  ContentWrapper,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n  Title,\r\n  Content\r\n} from \"./styles\";\r\n\r\nconst ContentBlock = ({\r\n  icon,\r\n  title,\r\n  content,\r\n  button,\r\n  id,\r\n  direction,\r\n}: ContentBlockProps) => {\r\n  const history = useHistory();\r\n\r\n  const handleButtonClick = (link?: string) => {\r\n    if (link) {\r\n      history.push(link);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={direction} triggerOnce>\r\n        <StyledRow\r\n          justify=\"space-between\"\r\n          align=\"middle\"\r\n          id={id}\r\n          direction={direction}\r\n        >\r\n          <Col lg={11} md={11} sm={12} xs={24}>\r\n            <SvgIcon src={icon} width=\"100%\" height=\"100%\" />\r\n          </Col>\r\n          <Col lg={11} md={11} sm={11} xs={24}>\r\n            <ContentWrapper>\r\n              <Title>{title}</Title>\r\n              <Content \r\n                dangerouslySetInnerHTML={{ __html: content }}\r\n              ></Content>\r\n              <ButtonWrapper>\r\n                {Array.isArray(button) &&\r\n                  button.map((item, index) => {\r\n                    return (\r\n                      <Button\r\n                        key={index} // Use index as a key here\r\n                        color={item.color}\r\n                        onClick={() => {\r\n                          if (item.link.startsWith(\"http\")) {\r\n                            // If item.link is a full URL (e.g., \"http://www.example.com\"), use window.location\r\n                            window.open(item.link, '_blank')\r\n                          } else {\r\n                            // Otherwise, use your routing function for internal paths (e.g., '/')\r\n                            handleButtonClick(item.link);\r\n                          }\r\n                        }}\r\n                      >\r\n                        {item.title}\r\n                      </Button>\r\n                    );\r\n                  })}\r\n              </ButtonWrapper>\r\n            </ContentWrapper>\r\n          </Col>\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default ContentBlock;\r\n"],"names":["StyledButton","styled","_templateObject","_taggedTemplateLiteral","Button","_ref","color","children","onClick","_jsx","ContentSection","Content","_templateObject2","Title","_templateObject3","StyledRow","Row","_templateObject4","direction","ContentWrapper","_templateObject5","ButtonWrapper","_templateObject6","_templateObject7","_templateObject8","_templateObject9","icon","title","content","button","id","history","useHistory","Fade","triggerOnce","_jsxs","justify","align","Col","lg","md","sm","xs","SvgIcon","src","width","height","dangerouslySetInnerHTML","__html","Array","isArray","map","item","index","link","startsWith","window","open","push"],"sourceRoot":""}