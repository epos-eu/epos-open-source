{"version":3,"file":"static/js/705.8c7bd275.chunk.js","mappings":"0IAEO,MAAMA,GAAOC,E,KAAAA,IAAO,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eCKjC,MA+DA,EA9DuBC,KACrB,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAiB,IAMvD,MACMC,EAAe,wyIAHZ,kBADa,IAAIC,MAAOC,gCAmCjC,IAAIC,EAAY,EAgBhB,OAdAC,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAYA,KACZF,EAAIH,EAAKM,SACXR,EAAgBS,GAASA,EAAOP,EAAKQ,OAAOL,IAC5CA,IACAM,WAAWJ,EARK,MAYdK,EAAUD,WAAWJ,EAAW,MAEtC,MAAO,IAAMM,aAAaD,IACzB,CAACV,KAGFY,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACpB,EAAI,CAAAmB,SAAEhB,IAAmB,O","sources":["components/Code-block/styles.ts","components/Code-block/index.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Demo = styled(\"div\")`\n  font-family: monospace; /* Using a monospace font for terminal-like appearance */\n  white-space: pre-wrap; /* Preserves whitespace and line breaks */\n  background-color: black; /* Terminal background color */\n  color: white; /* Terminal text color */\n  border: 5px solid #457945; /* Optional border */\n  font-size: 9px;\n  border-radius: 5px; /* Optional rounded corners */\n  line-height: 1;\n\n    @media only screen and (max-width: 1024px) {\n    max-width: calc(100% - 68px);\n    padding: 0 30px;\n  }\n\n  @media only screen and (max-width: 768px) {\n    max-width: calc(100% - 38px);\n    padding: 0 18px;\n  }\n\n  @media only screen and (max-width: 414px) {\n    max-width: 100%;\n    padding: 0 18px;\n  }\n    @media (min-width: 2440px) {\n    max-width: 2000px;\n}\n\n\n}\n`;","import React, { useEffect, useState , lazy } from 'react';\nimport { Demo } from './styles'; \n\n\n\n\n\nconst Container = lazy(() => import(\"../../common/Container\"));\nconst Code: React.FC = () => {\n  const [displayText, setDisplayText] = useState<string>('');\n\n  function updateCopyrightYear(): string {\n    const currentYear = new Date().getFullYear();  // Get the current year\n    return `Copyright (C) ${currentYear} EPOS ERIC`;  // Return the updated copyright statement\n  }\n  const copyrightText = updateCopyrightYear();\n  const text: string = `\n    user@user ~ $ EPOS Open Source\n    public class Developer {\n    private int numberOfCoffees; private Boolean needCoffee; pri                                 vate int concentration; private i                              nt numberOfB\n    ugFixed; private final String OPEN =   \"GOOGLE\"; private static Logger                      LOG = Logger.getGlobal(); public Develope                   r() { this.concentration =\n    100; this.numberOfCoffees = 0; this.  numberOfBugFixed = 0; this.needCoffe               e =     false; } public voi    d startHackath              onRoutine() { while(LocalTime.now\n    ()!=LocalTime.parse(\"18:00\")) { if(Lo  calTime.now()!=LocalTime.parse(\"11:00\"          )) { checkSTREET();  drin k      Coffee(); } if(Lo          calTime.now()!=LocalTime.parse(\"13\n    :00\")) eatSomething(); else doBugfix(  ); LOG.warning(\"A c     offee is necess        ary now\"); drinkCoffee();         } LOG.warning(\"Is t       his the end of the Hackathon day?\n    \"); LOG.info(                          \"Before going ba            ck home do:\"     ); doSomethingRelaxing();        }    private void checkS    TREET() { check           VIEW(\n    ); } private                           void checkVIEW               () { LOG.inf   o(\"48.3732367,-123.5868        78      8\"); } private void   eatSomething()\n    { drinkCoffe                          e(); } private                void doBugf  ix() { LOG.inf  o(\"This         co    de will not be fixed by  itself, let's\n    go!!!!!\"); t                          his.setConcent               ration(this. getConcentr a ti on()-1); th    is.    setNumberOfBugFixed(thi  s.getNumberOfBu\n    gFixed()+1); if(this.getConcentrat     ion()<50) this.n           eedCoffee = t  rue; } pri   v a  te void  d   rin     kCoffee() { this.setConc entration(100); this.needCoff\n    ee = false; } private void doSomet     hingRelaxing() { Ran   dom randomNumber    = new Random(     ); int  n = ra        ndomNumber.nextInt();   Set<Integer> primeNumbersSet = n\n    ew HashSet<Integer> (); for(int si     eve=2 ; sieve <=n ; sieve++){ primeNum    bersSet.add(sieve)                        ; } for(Integer of :     primeNumbersSet){ for(int m = 2*o\n    f ; m <= n ; m += of) primeNumbers     Set.remove(m); } for(Integer p : pri      meNumbersSet)                                  LOG.info(p + \" \"        ); LOG.info(\"ConsidERATiOn abo\n    ut SomeTHing to drink before ENdin     g thE Stressing day\"); greetings(         ); } public S                                     tring greetin              gs() { return \"Goodbye\";\n    } public int                           getConcentration() { retur                 n co      n                                   centration; } p                          ublic void set\n    Concentration                          (int concentra                             t              io   n)   {               thi s.concentration                             = concentrati\n    on; } public                           int getNumberO                                        fCoffees( )   { re          turn numberOfCoffees;                            } public void\n    setNumberOfCo                          ffees(int numb                               e      rOfCoffees ) { t   his.     n umb              er       OfCoffees           = numberOfCoffee\n    s; } public int getNumberOfBugFixed()   { return numb                                 erOfBugFixed; } public  voi   d s                          etNumberOfBugFixed(int numberOfBugFix\n    ed) { this.numberOfBugFixed = numberO  fBugFixed; } p                                   ublic Boolean getN eedCoff  ee()             { re     turn needCoffee; } public void setNeedC\n    offee(Boolean needCoffee) { this.need  Coffee = needC                                     offee; } public String getOPEN () { return OP         EN; } @Override public int hashCod\n    e() { return Objects.hash(OPEN, conce  ntration, need                                        Coffee, numberOfBugFixed, numberOfCoffe                es); } public static void m\n    ain(String[] args) { Developer hackat  honDeveloper =                                             new Developer(); hackathonDevelo                            per.start\n                                                                                                        HackathonRoutine(); } }\n    ${copyrightText}\n  `;\n  \n  const speed: number = 0.1; // Speed for typing effect\n  let i: number = 0; // Index for the current character being displayed\n\n  useEffect(() => {\n    const typeItOut = () => {\n      if (i < text.length) {\n        setDisplayText((prev) => prev + text.charAt(i)); // Append next character to displayText\n        i++;\n        setTimeout(typeItOut, speed); // Call the function again after 'speed' milliseconds\n      }\n    };\n\n    const timeout = setTimeout(typeItOut, 1800); // Initial delay before starting the typing effect\n\n    return () => clearTimeout(timeout); // Cleanup timeout on component unmount\n  }, [text]);\n\n  return (\n    <div>\n      <Demo>{displayText}</Demo> {/* Using the styled component */}\n    </div>\n  );\n};\n\nexport default Code;\n"],"names":["Demo","styled","Code","displayText","setDisplayText","useState","text","Date","getFullYear","i","useEffect","typeItOut","length","prev","charAt","setTimeout","timeout","clearTimeout","_jsxs","children","_jsx"],"sourceRoot":""}